//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccessCodeLib.AccUnit.Extension.OpenAI.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.10.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Create a test procedure similar to NUnit.\r\nWork with VBA in Access and utilize th" +
            "e AccUnit testing framework.\r\nPlease use the following format for the test: \r\n\r\n" +
            "```vba\r\n{TESTMETHODTEMPLATE}\r\n```")]
        public string SimpleTestPrePrompt {
            get {
                return ((string)(this["SimpleTestPrePrompt"]));
            }
            set {
                this["SimpleTestPrePrompt"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"Create a test procedure that uses row-test definitions similar to NUnit.
Work with VBA in Access and utilize the AccUnit testing framework.
I expect each AccUnit:Row entry to be treated as a separate test case, and for the test results to be checked directly within the test method itself.
Please use the following format for the test: 

```vba
'AccUnit:Row([param1], [param2], ... , [ExpectedValue]).Name(...)
'AccUnit:Row([param1], [param2], ... , [ExpectedValue]).Name(...)
{TESTMETHODTEMPLATE}
```

Parameters should be directly included in the signature of the test procedure. Also use an Expected parameter and define the value in the test row definition. Set optional parameters to required.
Test methods must be declared as Public.
The AccUnit:Row annotations should be defined outside the procedure. 
No AccUnit:Row if method has no parameters.
No blank line between row lines and procedure declaration.")]
        public string RowTestPrePrompt {
            get {
                return ((string)(this["RowTestPrePrompt"]));
            }
            set {
                this["RowTestPrePrompt"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Return only the code without explanation.\r\nNote for assert: since Is is not allow" +
            "ed as a variable in VBA, the framework uses Iz (e.g. for Iz.EqualTo) as a substi" +
            "tute. Don\'t use Call Assert.That(...). Use only Assert.That ...\r\n")]
        public string PrePromptEndStatement {
            get {
                return ((string)(this["PrePromptEndStatement"]));
            }
            set {
                this["PrePromptEndStatement"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Please create a test procedure for the following method: \r\n{METHODCODE}")]
        public string ProcedureTemplate {
            get {
                return ((string)(this["ProcedureTemplate"]));
            }
            set {
                this["ProcedureTemplate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Public Sub TestMethod(...)\r\n    \' Arrange\r\n    ...\r\n    \' Act\r\n    ...\r\n    \' Ass" +
            "ert\r\n    Assert.That ...\r\nEnd Sub")]
        public string DefaultTestMethodTemplate {
            get {
                return ((string)(this["DefaultTestMethodTemplate"]));
            }
            set {
                this["DefaultTestMethodTemplate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Please create a test procedure for the following method from the class {CLASSNAME" +
            "}: \r\n{METHODCODE}")]
        public string ProcedureTemplateWithClassName {
            get {
                return ((string)(this["ProcedureTemplateWithClassName"]));
            }
            set {
                this["ProcedureTemplateWithClassName"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Use {TESTMETHODNAME} as name for test method.")]
        public string TestProcedureNameTemplate {
            get {
                return ((string)(this["TestProcedureNameTemplate"]));
            }
            set {
                this["TestProcedureNameTemplate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Use {PARAMETERS} as parameters for test method.")]
        public string TestProcedureParametersTemplate {
            get {
                return ((string)(this["TestProcedureParametersTemplate"]));
            }
            set {
                this["TestProcedureParametersTemplate"] = value;
            }
        }
    }
}
